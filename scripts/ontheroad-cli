#!/bin/bash

while true
do
	clear
	echo "On the Road Development Tool"
	echo "----------------------------"
	echo "1) Create new container"
	echo "2) Destroy a container"
	echo "3) Use a container"
	echo "4) About On The Road"
	echo "5) Help"
	echo "6) Danger zone"
	echo "0) Exit"
	echo

	read input

	if [ "$input" == "0" ]; then
		clear
		exit
	fi

	if [ "$input" == "4" ]; then
		clear
		echo "----------------------------"
		echo "On The Road Development Tool"
		echo
		echo "Copyright (c) 2017 Emanuele Sorce"
		echo
		echo "Use this tool to easily develop applications inside an Ubuntu Touch device"
		echo
		echo "This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."
		echo "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details."
		echo "You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>."
		echo
		echo "Press something to continue..."
		read -n 1 -s
	fi

	if [ "$input" == "1" ]; then

		if [ ! -s ~/.cache/ontheroad.emanuelesorce/containers/rootfs.tar.bz2 ]; then

			clear
			echo "----------------------"
			echo "Create a new container"
			echo
			echo "Container not downloaded"
			echo "Download is approximately of ~170Mb"
			echo "The downloaded image is an already debootstrapped container ready to be installed"
			echo "The download is required only once, then you'll be able to quickly setup as many containers as you want offline"
			echo
			echo "press 'i' to download it"
			echo

			read input2

			if [ "$input2" == "i" ]; then

				clear
				echo "----------------"
				echo "Downloading..."
				echo
				echo "log:"
				echo

				mkdir ~/.cache/ontheroad.emanuelesorce/containers/
				cd ~/.cache/ontheroad.emanuelesorce/containers

				wget --header 'Host: dl.dropboxusercontent.com' --user-agent 'Mozilla/5.0 (X11; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0' --header 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' --header 'Accept-Language: en-US,en;q=0.5' --referer 'https://www.dropbox.com/' --header 'Cookie: uc_session=Ths8NGYbgncStSeEZfG6GNd3Ey7UKkQMt5kqnZchFtGnFRYBRji3PGYqrmQ5LN7d' --header 'Upgrade-Insecure-Requests: 1' 'https://dl.dropboxusercontent.com/content_link/JDWWlMtDIDW2mcktQMjqtioRGV0YOMnfmcioIVBsVAhIJLAC7EOgaPP620Mossk4/file?_download_id=1754057429667455765261847043826359020916385214064342069332446108&_notify_domain=www.dropbox.com&dl=1' --output-document 'rootfs.tar.bz2'

				if [ $? -eq 0 ]; then

					clear
					echo "--------------------"
					echo "Contaner successfully downloaded!"
					echo
					echo "Now you can create new containers"
					echo
					echo "press enter to continue"

					read qwe

				else

					rm -r ~/.cache/ontheroad.emanuelesorce/containers
					echo
					echo "------------------"
					echo "Container download failed"
					echo
					echo "press enter to continue"

					read qwee
				fi
			fi
		else

			clear
			echo "----------------------"
			echo "Create a new container"
			echo
			echo "Insert a name for the new container:"
			echo "Name must be of form ([a-z0-9][a-z0-9+.-]+)."
			echo
			read newname
			clear
			if [ -d "/home/phablet/.cache/libertine-container/$newname/rootfs" ]; then
				clear
				echo "----------------------------"
				echo "The container already exits!"
				echo
				echo "Press something to continue..."
				read -n 1 -s
			else
				clear
				echo "----------------------------"
				echo "Installing the new container"
				echo
				echo "This could take a while. There is no need for an internet connection."
				echo "Creating into: /home/phablet/.cache/libertine-container/$newname"
				echo
				echo "log:"
				echo
				mkdir -p "/home/phablet/.cache/libertine-container/$newname"
				cp -v ~/.cache/ontheroad.emanuelesorce/containers/rootfs.tar.bz2 "/home/phablet/.cache/libertine-container/$newname/"
				bzip2 -d  "/home/phablet/.cache/libertine-container/$newname/rootfs.tar.bz2"
				tar xvf "/home/phablet/.cache/libertine-container/$newname/rootfs.tar" -C "/home/phablet/.cache/libertine-container/$newname/"
				rm "/home/phablet/.cache/libertine-container/$newname/rootfs.tar"

				LINES=$(wc -l < ~/.local/share/libertine/ContainersConfig.json)
				if [ "$LINES" == "3" ]; then
					rm ~/.local/share/libertine/ContainersConfig.json
					touch ~/.local/share/libertine/ContainersConfig.json
				fi

				if [ ! -s ~/.local/share/libertine/ContainersConfig.json ]; then
					touch ~/.cache/ontheroad.emanuelesorce/temp/isnew
					echo "{" > ~/.local/share/libertine/ContainersConfig.json
					echo "    \"containerList\": [" >> ~/.local/share/libertine/ContainersConfig.json
					echo "    ]," >> ~/.local/share/libertine/ContainersConfig.json
					echo "   \"defaultContainer\":\"$newname\"" >> ~/.local/share/libertine/ContainersConfig.json
					echo "}" >> ~/.local/share/libertine/ContainersConfig.json
				fi
				mkdir ~/.cache/ontheroad.emanuelesorce/temp
				cp -v ~/.local/share/libertine/ContainersConfig.json ~/.cache/ontheroad.emanuelesorce/temp/
				sed -n '1,2p' ~/.cache/ontheroad.emanuelesorce/temp/ContainersConfig.json > ~/.local/share/libertine/ContainersConfig.json
				echo "        {" >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"distro\": \"vivid\"," >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"id\": \"$newname\"," >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"InstallStatus\": \"ready\"," >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"InstalledApps\": []," >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"multiarch\": \"disabled\"," >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"name\": \"OnTheRoad-$newname\"," >> ~/.local/share/libertine/ContainersConfig.json
				echo "            \"type\": \"chroot\"" >> ~/.local/share/libertine/ContainersConfig.json

				if [ -f ~/.cache/ontheroad.emanuelesorce/temp/isnew ]; then
					echo "        }" >> ~/.local/share/libertine/ContainersConfig.json
					rm ~/.cache/ontheroad.emanuelesorce/temp/isnew
				else
					echo "        }," >> ~/.local/share/libertine/ContainersConfig.json
				fi
				sed -n '3,$p' ~/.cache/ontheroad.emanuelesorce/temp/ContainersConfig.json >> ~/.local/share/libertine/ContainersConfig.json
				rm ~/.cache/ontheroad.emanuelesorce/temp/ContainersConfig.json

				if [ -d "/home/phablet/.cache/libertine-container/$newname/rootfs" ]; then
					clear
					echo "------------------------------"
					echo "Container created successfully"
					echo
					echo "Press something to continue..."
					read -n 1 -s
				else
					rm -r "/home/phablet/.cache/libertine-container/$newname"
					clear
					echo "-------------------------------------------"
					echo "Error occurred while creating the container"
					echo
					echo "Press something to continue..."
					read -n 1 -s
				fi
			fi
		fi
	fi

	if [ "$input" == "5" ]; then
		clear
		echo "On The Road Manual"
		echo "------------------"
		echo "On The Road uses chroot containers to have environments where the hacker can develop freely"
		echo "To create a new container, select Create New Container in the main menu then follow instructions."
		echo "Once a container is created you can use it going in the Use Container section of the main menu, there you can set up a developing workflow installing Clickable automatically and open shells"
		echo "Another point is the seamless integration with Libertine, you can use your Libertine containers with On The Road out of the box, and viceversa if you wish"
		echo "If you plan to use otr remotely (from a computer throught ssh, adb, phablet-shell) or from a Iperspace session, use the otr-adb command instead"
		echo
		echo "Press something to continue..."
		read -n 1 -s
	fi

	if [ "$input" == "6" ]; then
		clear
		echo "DANGER ZONE"
		echo "-----------"
		echo "Do you want to open the door of the danger zone and enter? Don't do anything here if you don't know what you're doing. Go back while you are still in time"
		echo
		echo "1) No"
		echo "2) No"
		echo "3) No"
		echo "4) No"
		echo "5) Yes"
		echo "6) No"
		echo "7) No"
		echo "8) No"
		echo

		read input2

		if [ "$input2" == "5" ]; then
			clear
			echo "DANGER ZONE"
			echo "-----------"
			echo
			echo "1) Back"
			echo
			echo "2) Container reset"
			echo

			read input3

			if [ "$input3" == "2" ]; then
				clear
				echo "CONTAINER RESET"
				echo "---------------"
				echo
				echo "Reset ALL containers, both Libertine AND OnTheRoad ones. Reset also configurations. Use this if the ContainersConfig.json file got corrupted. This operation requires root privilegies"
				echo
				echo "1) Proceed resetting"
				echo
				echo "2) Back"
				echo

				read input4
				
				if [ "$input4" == "1" ]; then
					clear
					echo "Resetting, this could take a while..."
					echo "Log:"
					echo
					sudo rm -r ~/.cache/libertine-container
					sudo rm ~/.local/share/libertine/ContainersConfig.json
					touch ~/.local/share/libertine/ContainersConfig.json
				fi
			fi
		fi
	fi

	if [ "$input" == "2" ]; then
		clear
		echo "-------------------"
		echo "Destroy a container"
		echo
		echo "What container you want to destroy?"
		echo "Container list:"
		containerlist=$(libertine-container-manager list)
		echo
		echo "$containerlist"
		echo

		read destroycontainer

		if [ -d "/home/phablet/.cache/libertine-container/$destroycontainer" ]; then
			clear
			echo "-------------"
			echo "Destroying..."
			echo
			libertine-container-manager destroy -i $destroycontainer
			if [ ! -d "/home/phablet/.cache/libertine-container/$destroycontainer" ]; then
				clear
				echo "--------------------------------"
				echo "Container successfully destroyed"
				echo
				echo "Press something to continue..."
				read -n 1 -s
			else
				clear
				echo "------------------------"
				echo "Cannot destroy container"
				echo
				echo "Press something to continue..."
				read -n 1 -s
			fi
		else
			clear
			echo "------------------------------------"
			echo "There is no container with that name"
			echo
			echo "Press something to continue..."
			read -n 1 -s
		fi
	fi

	if [ "$input" == "3" ]; then
		clear
		echo "---------------"
		echo "Use a container"
		echo
		echo "What container you want to use?"
		echo "container list:"
		echo
		containerlist=$(libertine-container-manager list)
        	echo "$containerlist"
		echo

		read contouse

		if [ ! -d "/home/phablet/.cache/libertine-container/$contouse" ]; then
			clear
			echo "-----------------------------"
			echo "That container doesn't exist!"
			echo
			echo "Press something to continue..."
			read -n 1 -s
		else
			clear
			echo "-----------------------"
			echo "$contouse"
			echo
			echo "1) Open a bourne again shell (BASH)"
			echo "2) Libertine launch"
			echo "3) Set up Clickable"
			echo
			echo "4) Back"
			echo

			read input2

			if [ "$input2" == "1" ]; then
				clear
				libertine-container-manager exec -i $contouse -c /bin/bash
			fi

			if [ "$input2" == "2" ]; then
				clear
				libertine-launch -i $contouse
			fi

			if [ "$input2" == "3" ]; then
				clear
				echo "------------"
				echo "Clickable"
				echo
				echo "Clickable, the wonderful tool to develop apps for Ubuntu Touch"
				echo "Remember to use --container-mode inside the container"
				echo
				echo "Press i to install, anyhting else to abort"
				echo

				read input3

				if [ "$input3" == "i" ]; then
					clear
					echo "--------------------"
					echo "Installing Clickable"
					echo
					echo "log:"
					echo
					echo "installing dependencies..."
					libertine-container-manager exec -i $contouse -c "apt update"
					libertine-container-manager exec -i $contouse -c "apt install cookiecutter git docker -y" &&
					echo "downloading Clickable..." &&
					libertine-container-manager exec -i $contouse -c "git clone https://github.com/bhdouglass/clickable.git" &&
					echo "configuring..." &&
					libertine-container-manager exec -i $contouse -c "ln -sf /clickable/clickable /bin/clickable" &&
					echo &&
					echo "Clickable successfully installed"
					echo "Press anything to continue..."

					read input4
				fi
			fi
		fi
	fi
done
